@using Sonrai.ExtRS.Models.Enums
@model SubscriptionView

<script>
    $(function () {
        $("#startDateTime").datepicker();
        $("#endDate").datepicker().val('');
    });
</script>

<script>
    function changeRecurrenceDiv(ele, scheduleType) {
        for (let i = 1; i < 6; i++) {
            if (i == indexMatchingText(ele, scheduleType)) {
                $('#recurrenceContainer' + i).show()
                $('#recurrenceContainer' + i).css('max-height: 100;')
            }
            else {
                $('#recurrenceContainer' + i).hide()
                $('#recurrenceContainer' + i).css('max-height: 0;')
            }
        }
    }

    function indexMatchingText(ele, text) {
        for (var i = 0; i < ele.length; i++) {
            if (ele[i].childNodes[0].nodeValue === text) {
                return i;
            }
        }
        return undefined;
    }
</script>
<style>
    .scheduleTitleLabel {
        color: lightblue;
    }
</style>
@using (Html.BeginForm("PostSubscription", "Subscriptions", FormMethod.Post))
{
    <div class="container">
        @Html.HiddenFor(x => x.Subscription!.EventType)
        @Html.HiddenFor(x => x.Subscription!.DeliveryExtension)
        @Html.HiddenFor(x => x.Subscription!.LocalizedDeliveryExtensionName)
        @Html.HiddenFor(x => x.Subscription!.IsActive)
        @Html.HiddenFor(x => x.Subscription!.IsDataDriven)
        @Html.HiddenFor(x => x.Subscription!.Owner)
        <script>hyperform(window);</script>
        <section>
            <h5>SUBSCRIPTION DETAILS</h5>
            <div style="box-shadow: 5px 10px 8px #888888;">
                <fieldset name="schedule">
                    <p>
                        <label style="font-size:10pt">Description:</label><br />
                        @Html.TextBoxFor(x => x.Subscription!.Description, new { @required = "required" })
                    </p>
                    <p>
                        <label style="font-size:10pt">Report:</label><br />
                        @Html.DropDownListFor(x => x.Subscription!.Report, new SelectList(Model.Reports, "Path", "Name"), "--Select--", new { @required = "required" })
                    </p>
                </fieldset>
                <br />
                <br />
                <h5>SCHEDULE</h5>
                <fieldset name="schedule">
                    @Html.DropDownListFor(x => x.SelectedRecurrence, new SelectList(Model.RecurrenceTypes), "--Select--", new { onchange = "changeRecurrenceDiv(this, this.value)" })
                    <br />
                    <br />
                    <div style="height:11%">
                        <div id="recurrenceContainer1" style="display:none; max-height: 0;">
                            <b class="scheduleTitleLabel;">Hourly schedule</b>
                            <fieldset>
                                Run the scedule every:
                                @Html.TextBoxFor(x => x.RecurrenceHours) hours &nbsp; @Html.TextBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MinuteRecurrence.MinutesInterval) minutes
                            </fieldset>
                        </div>
                        <div id="recurrenceContainer2" style="display:none; max-height: 0;">
                            <b class="scheduleTitleLabel;">Daily schedule</b>
                            <fieldset>
                                <div>
                                    <input type="radio" id="indWeekdays" name="dailyRecurr" value="indWeekdays" checked />
                                    <label for="indWeekdays">On the following days:</label>
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Sunday) Sun
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Monday) Mon
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Tuesday) Tue
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Wednesday) Wed
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Thursday) Thu
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Friday) Fri
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Saturday) Sat
                                </div>
                                <div>
                                    <input type="radio" id="everyWeekDay" name="dailyRecurr" value="everyWeekDay" />
                                    <label for="everyWeekDay">Every</label>
                                    Weekday @Html.CheckBoxFor(x => x.ScheduleRecurrenceIsEveryWeekday)
                                    Weekend @Html.CheckBoxFor(x => x.ScheduleRecurrenceIsEveryWeekend)
                                </div>
                                <div>
                                    <input type="radio" id="repeatAfterDays" name="dailyRecurr" value="repeatAfterDays" />
                                    <label for="repeatAfterDays">Repeat after this number of days:</label> @Html.TextBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.DailyRecurrence.DaysInterval)
                                </div>
                            </fieldset>
                        </div>
                        <div id="recurrenceContainer3" style="display: none; max-height: 0;">
                            <b class="scheduleTitleLabel;">Weekly schedule</b>
                            <fieldset>
                                <div id="weeklyRecurrenceContainer">
                                    Repeat after this number of weeks: @Html.TextBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.WeeksInterval)
                                    <br />
                                    On day(s):<br />
                                    <label for="indWeekdays">On the following days:</label>
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Sunday) Sun
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Monday) Mon
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Tuesday) Tue
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Wednesday) Wed
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Thursday) Thu
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Friday) Fri
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Saturday) Sat
                                    @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.WeeklyRecurrence.DaysOfWeek.Sunday) Sun
                                    <br />
                                </div>
                            </fieldset>
                        </div>
                        <div id="recurrenceContainer4" style="display: none;max-height: 0;">
                            <fieldset>
                                <b class="scheduleTitleLabel;">Monthly schedule</b>
                                <br />
                                Months:
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.January) Jan
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.February) Feb
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.March) Mar
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.April) Apr
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.May) May
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.June) Jun
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.July) Jul
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.August) Aug
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.September) Sep
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.October) Oct
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.November) Nov
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.MonthsOfYear.December) Dec
                                <br />
                                On day(s) of the week:
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Sunday) Sun
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Monday) Mon
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Tuesday) Tue
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Wednesday) Wed
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Thursday) Thu
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Friday) Fri
                                @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyDOWRecurrence.DaysOfWeek.Saturday) Sat
                                <br />
                                On calendar day(s): @Html.TextBoxFor(x => x.Subscription!.Schedule.Definition.Recurrence.MonthlyRecurrence.Days)
                            </fieldset>
                        </div>
                        <div id="recurrenceContainer5" style="display: none; max-height: 0;">
                            <b class="scheduleTitleLabel;">One-time schedule</b><br />
                            Schedule runs only once.<br />
                        </div>
                    </div>
                    <br />
                    <p>
                        Choose whether to run the report on an hourly, daily, weekly, monthly, or one time basis.<br />
                        All times are expressed in @TimeZoneInfo.Local.
                    </p>
                    <p>
                        <label style="font-size:10pt">Begin running this schedule on:</label><br />
                        @Html.TextBoxFor(x => x.Subscription!.Schedule.Definition.StartDateTime, "{0:MM/dd/yyyy}", new { @id = "startDateTime", @class = "input-small", @required = "required" })
                    </p>
                    <label style="font-size:10pt">at:</label>
                    <br />
                    @Html.TextBoxFor(x => x.ScheduleStartHours, new { @required = "required", @style = "width:4%" }) : @Html.TextBoxFor(x => x.ScheduleStartMinutes, new { @required = "required", @style = "width:4%" }) @Html.CheckBoxFor(x => x.IsAM, new { @id = "isAM" }) AM / @Html.CheckBoxFor(x => x.IsPM, new { @id = "isPM" }) PM
                    <br />
                    <p>
                        @Html.CheckBoxFor(x => x.Subscription!.Schedule.Definition.EndDateSpecified, new { @id = "endDateSpecified" }) <label style="font-size:10pt">Stop this schedule on:</label><br />
                        @Html.TextBoxFor(x => x.Subscription!.Schedule.Definition.EndDate, "{0:MM/dd/yyyy}", new { @id = "endDate", @class = "input-small" })
                    <p>
                </fieldset>
                <br />
                <br />
                <h5>DELIVERY (email)</h5>
                <fieldset name="delivery">
                    <p>
                        <label style="font-size:10pt">To:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[0].Name)
                        @Html.TextBoxFor(x => x.Subscription!.ExtensionSettings.ParameterValues[0].Value, new { @required = "required" })
                    </p>
                    <p>
                        <label style="font-size:10pt">Cc:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[1].Name)
                        @Html.TextBoxFor(x => x.Subscription!.ExtensionSettings.ParameterValues[1].Value)
                    </p>
                    <p>
                        <label style="font-size:10pt">Bcc:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[2].Name)
                        @Html.TextBoxFor(x => x.Subscription!.ExtensionSettings.ParameterValues[2].Value)
                    </p>
                    <p>
                        <label style="font-size:10pt">Reply to:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[3].Name)
                        @Html.TextBoxFor(x => x.Subscription!.ExtensionSettings.ParameterValues[3].Value)
                    </p>
                    <p style="font-size:8pt;">(Use (;) to separate multiple e-mail addresses.)</p>
                    <p>
                        <label style="font-size:10pt">Subject:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[4].Name)
                        @Html.TextBoxFor(x => x.Subscription!.ExtensionSettings.ParameterValues[4].Value, new { @required = "required" })
                    </p>
                    <p>
                        <label style="font-size:10pt">Render Format:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[5].Name)
                        @Html.DropDownListFor(x => x.Subscription!.ExtensionSettings.ParameterValues[5].Value,
                                 Enum.GetValues(typeof(RenderFormats)).Cast<RenderFormats>()
                                 .Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }))
                    </p>
                    <p>
                        <label style="font-size:10pt">Include Report:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[6].Name)
                        @Html.CheckBoxFor(x => x.IncludeReport)
                    </p>
                    <p>
                        <label style="font-size:10pt">Include Link:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[7].Name)
                        @Html.CheckBoxFor(x => x.IncludeLink)
                    </p>
                    <p>
                        <label style="font-size:10pt">Priority:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[8].Name)
                        @Html.DropDownListFor(x => x.Subscription!.ExtensionSettings.ParameterValues[8].Value,
                                 Enum.GetValues(typeof(EmailPriority)).Cast<EmailPriority>()
                                 .Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "--Select--", new { @required = "required" })
                    </p>
                    <p>
                        <label style="font-size:10pt">Comment:</label><br />
                        @Html.HiddenFor(x => x.Subscription!.ExtensionSettings.ParameterValues[9].Name)
                        @Html.TextAreaFor(x => x.Subscription!.ExtensionSettings.ParameterValues[9].Value)
                    </p>
                    @Html.HiddenFor(x => x.Subscription.Id)
                </fieldset>
                <br />
                <br />
                @*   <h5>PARAMETERS</h5>
            <div id="parameters">
            <fieldset name="parameterFields" disabled>
            //
            </fieldset>
            </div> *@
                <br />
                <br />
                <input type="submit" value="Apply" />
                <br />
                <br />
                <div style="font-size:8pt">
                    <br />
                    Created by @Model.Subscription?.Owner on @Convert.ToDateTime(@Model.Subscription?.ModifiedDate).ToShortDateString() at @Convert.ToDateTime(@Model.Subscription?.ModifiedDate).ToLongTimeString()
                    <br />
                    Changed by @Model.Subscription?.ModifiedBy on @Convert.ToDateTime(@Model.Subscription?.ModifiedDate).ToShortDateString() at @Convert.ToDateTime(@Model.Subscription?.ModifiedDate).ToLongTimeString()
                    <br />
                </div>
            </div>
        </section>
    </div>

    <script>  
        // End date
        hyperform.addValidator(
            document.getElementById('endDate'),
            function (element) {
                var valid = !document.getElementById('endDateSpecified').checked ||
                    element.value;
                element.setCustomValidity(
                    valid ?
                        '' :
                        'Please enter an end date.'
                );
                return valid;
            }
        );
        document.getElementById('checkbox').addEventListener('submit', function () {
            document.getElementById('endDate').reportValidity();
        });
        hyperform(window);
    </script>
}
