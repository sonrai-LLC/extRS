using ExtRS.Tests.Properties;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using Sonrai.ExtRS.Models;
using ReportingServices.Api.Models;
using System;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;

namespace Sonrai.ExtRS.UnitTests
{
    [TestClass]
    public class SSRSTests
    {
        private SSRSService ssrs;
        private HttpClient httpClient;
        readonly string defaultCreds = "\"UserName\": " + "\"ExtRSAuth\",  " + "\"Password\": \"" + Resources.passphrase + "\", \"Domain\": \"localhost\"";

        [TestInitialize]
        public async Task InitializeTests()
        {
            httpClient = new HttpClient();
            SSRSConnection connection = new SSRSConnection(Resources.ReportServerName, "ExtRSAuth", AuthenticationType.ExtRSAuth);
            connection.SqlAuthCookie = await SSRSService.GetSqlAuthCookie(httpClient, connection.Administrator, Resources.passphrase, connection.ServerName);
            ssrs = new SSRSService(connection, null);
        }

        [TestMethod]
        public async Task GetGetSqlAuthCookieSucceeds()
        {
            var cookieString = await SSRSService.GetSqlAuthCookie(httpClient, "ExtRSAuth", "", "localhost");
            Assert.IsTrue(cookieString.Length > 0);
        }

        [TestMethod]
        public async Task CreateSessionSucceeds()
        {
            HttpResponseMessage result = await ssrs.CallApi(HttpVerbs.POST, "Session", "{" + defaultCreds + "}");
            Assert.IsTrue(Convert.ToString(result.StatusCode) == "Created");
        }

        [TestMethod]
        public async Task DeleteSessionSucceeds()
        {
            var result = await ssrs.CallApi(HttpVerbs.DELETE, "Session");
            Assert.IsTrue(Convert.ToString(result.StatusCode) == "OK");
        }

        [TestMethod]
        public async Task GetAllCatalogItemsSucceeds()
        {
            var catalogItems = await ssrs.GetCatalogItems();
            Assert.IsTrue(catalogItems.Count > 0);
        }

        [TestMethod]
        public async Task GetCatalogItemSucceeds()
        {
            CatalogItem dataSource = await ssrs.GetCatalogItem("path='/Reports/Team'");
            Assert.IsTrue(dataSource.Name != null);
        }

        [TestMethod]
        public async Task GetAllReportsSucceeds()
        {
            List<Report> reports = await ssrs.GetReports();
            Assert.IsTrue(reports.Count > 0);
        }

        [TestMethod]
        public async Task GetReportSucceeds()
        {
            Report report = await ssrs.GetReport("path='/Reports/Team'");
            Assert.IsTrue(report.Name != null); 
        }

        [TestMethod]
        public async Task GetFoldersSucceeds()
        {
            List<Folder> folders = await ssrs.GetFolders();
            Assert.IsTrue(folders.Count > 0);
        }

        [TestMethod]
        public async Task GetFolderSucceeds()
        {
            Folder folder = await ssrs.GetFolder("path='/Reports'");
            Assert.IsTrue(folder.Name != null);
        }

        [TestMethod]
        public async Task GetDataSourcesSucceeds()
        {
            List<DataSource> dataSources = await ssrs.GetDataSources();
            Assert.IsTrue(dataSources.Count > 0);
        }

        [TestMethod]
        public async Task GetDataSourceSucceeds()
        {
            DataSource dataSource = await ssrs.GetDataSource("path='/Data Sources/localhost'");
            Assert.IsTrue(dataSource.Name != null);
        }

        [TestMethod]
        public async Task GetDataSetsSucceeds()
        {
            List<DataSet> datasets = await ssrs.GetDataSets();
            Assert.IsTrue(datasets.Count > 0);
        }

        [TestMethod]
        public async Task GetDataSetSucceeds()
        {
            DataSet dataSource = await ssrs.GetDataSet("path='/DataSets/Team'");
            Assert.IsTrue(dataSource.Name != null);
        }

        [TestMethod]
        public async Task CreateGetDeleteReportSucceeds()
        {
            string content = "\"Id\": \"791A1709-004C-4FA7-8C2F-88E879825221\"," +                         
                             "\"Name\": \"Some_Report__new979\"," +
                              "\"Description\": \"This is a desc\"," +
                              "\"Path\": \"/Reports\"," +
                              "\"Type\": \"Report\"," +
                              "\"Hidden\": \"false\"," +
                              "\"Size\": 0," +
                              "\"ModifiedBy\": \"ExtRSAuth\", " +
                              "\"ModifiedDate\": \"2023-06-25\"," +
                              "\"CreatedBy\": \"ExtRSAuth\"," +
                              "\"CreatedDate\": \"2023-06-25\"," +
                              "\"ParentFolderId\": \"af7c2bfd-9da4-4d6f-95c1-75b37498f273\"," +
                              "\"ContentType\": \"string\"," +
                              "\"Content\": \"\"," +
                              "\"HasDataSources\": \"false\"," +
                              "\"HasSharedDataSets\": \"false\"," +
                              "\"HasParameters\": \"false\"," +
                              "\"IsFavorite\": \"false\"";

            var postResp = await ssrs.CallApi(HttpVerbs.POST, "Reports", "{" + content + "}");
            Assert.IsTrue(postResp.IsSuccessStatusCode);   
            
            var getResponse = await ssrs.CallApi(HttpVerbs.GET, postResp.Headers.Location.Segments[4]);
            Assert.IsTrue(getResponse.IsSuccessStatusCode);

            var delResp = await ssrs.CallApi(HttpVerbs.DELETE, postResp.Headers.Location.Segments[4]);
            Assert.IsTrue(delResp.IsSuccessStatusCode);
        }

        [TestMethod]
        public async Task CreateGetDeleteCatalogItemSucceeds()
        {
            string content = "\"Id\": \"3A42F3DD-3B48-461C-9625-2CF531C301D2\"," +
                              "\"ModifiedBy\": \"ExtRSAuth\", " +
                              "\"Name\": \"EWTF_some_new_resource7\"," +
                               "\"Description\": \"This is a desc\"," +
                               "\"Path\": \"/Reports\"," +
                               "\"Type\": \"Resource\"," +
                               "\"Hidden\": \"false\"," +
                               "\"ModifiedDate\": \"2023-06-25\"," +
                               "\"CreatedBy\": \"ExtRSAuth\"," +
                               "\"CreatedDate\": \"2023-06-25\"," +
                               "\"ParentFolderId\": \"af7c2bfd-9da4-4d6f-95c1-75b37498f273\"," +
                               "\"ContentType\": \"text\"," +
                               "\"Content\": \"U29tZSB0ZXh0IGhlcmUuLi4uLi4uLi4=\"," +
                               "\"IsFavorite\": \"false\"";

            var result = await ssrs.CallApi(HttpVerbs.POST, "Resources", "{" + content + "}");
            Assert.IsTrue(result.IsSuccessStatusCode);

            var getResponse = await ssrs.CallApi(HttpVerbs.GET, result.Headers.Location.Segments[4]);
            Assert.IsTrue(getResponse.IsSuccessStatusCode);

            var delResult = await ssrs.CallApi(HttpVerbs.DELETE, result.Headers.Location.Segments[4]);
            Assert.IsTrue(result.IsSuccessStatusCode);
        }

        [Ignore]
        [TestMethod]
        public async Task GetParameterHtmlSucceeds()
        {
            var result = await ssrs.GetParameterHtml("path='/Reports/Team'");
            Assert.IsNotNull(result);
            Assert.IsTrue(result.Contains("<") && result.Contains("/>"));
        }

        [TestMethod]
        public async Task GetCatalogItemHtmlSucceeds()
        {
            string catalogItemResponse = await ssrs.GetCatalogItemHtml("path='/Reports/Team'");
            Assert.IsTrue(catalogItemResponse.ToString().Contains("<div "));
            Assert.IsTrue(catalogItemResponse.ToString().Contains("</div>"));
        }
    }
}
